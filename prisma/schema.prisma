// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model User {
  id            String    @id @default(cuid())
  clerkId       String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  publicKey     String?
  posts         Post[]
  events        Event[]
  Wallet        Wallet[]

  @@index([email])
  @@index([publicKey])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id             String      @id @default(cuid())
  name           String
  date           DateTime
  venue          String
  status         EventStatus @default(DRAFT)
  imageUrl       String?
  coverUrl       String?
  location       String?
  description    String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  organizerId    String?
  distributorKey String?
  organizer      User?       @relation(fields: [organizerId], references: [id])
  Asset          Asset[]

  @@index([organizerId])
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  CLOSED
  IN_PROGRESS
}

model StellaAssetContract {
  code    String
  issuer  String
  address String @id

  @@index([code, issuer, address])
}

model Asset {
  id             String         @id @default(cuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  address        String?
  label          String
  code           String
  issuer         String
  sacAddress     String?        @unique // Refers to the Stock Asset Contract Address
  distributor    String
  type           String
  eventId        String
  pricePerUnit   Decimal        @db.Decimal(10, 2)
  status         String         @default("ACTIVE")
  totalUnits     Int
  availableUnits Int            @default(0)
  event          Event          @relation(fields: [eventId], references: [id])
  AssetAuction   AssetAuction[]

  @@index([code, issuer])
  @@index([eventId])
  @@index([address])
}

model Bid {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  amount       Decimal      @db.Decimal(10, 2)
  bidder       String // Stellar Address
  assetAuction Int
  AssetAuction AssetAuction @relation(fields: [assetAuction], references: [id])

  @@index([bidder])
  @@index([assetAuction])
}

model AssetAuction {
  id                         Int       @id @default(autoincrement())
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  startsAt                   DateTime
  endsAt                     DateTime
  closedAt                   DateTime?
  bidCount                   Int       @default(0)
  assetId                    String
  owner                      String // Stellar Address
  highestBidder              String? // Stellar Address
  highestBid                 Decimal?  @default(0) @db.Decimal(10, 2)
  contractAddress            String
  contractMethodStartAuction String
  contractMethodEndAuction   String
  contractMethodBid          String
  contractMethodWithdraw     String
  contractMethodClaim        String
  contractMethodCancel       String
  contractMethodViewBids     String
  assetUnits                 Int
  asset                      Asset     @relation(fields: [assetId], references: [id])
  Bid                        Bid[]

  @@index([assetId])
}

model Wallet {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])

  @@index([address])
  @@index([userId])
}
